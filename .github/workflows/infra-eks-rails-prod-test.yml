name: infra-eks-rails-prod-test

on:
  pull_request:
    paths:
      - .github/workflows/infra-eks-rails-prod-test.yml
      - infra/eks-rails/terraform/**
  workflow_dispatch: null

concurrency: infra-eks-rails-prod

jobs:
  plan:
    name: Terraform plan
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
        working-directory: infra/eks-rails/terraform/production
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/terraform-github-actions
          role-session-name: gh-actions
          aws-region: ap-northeast-1

      - name: Get Terraform Version
        id: terraform-version
        run: |
          TERRAFORM_VERSION=$(cat .terraform-version)
          echo "value=$TERRAFORM_VERSION" >> $GITHUB_OUTPUT
          echo "Terraform version: $TERRAFORM_VERSION"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.terraform-version.outputs.terraform-version }}
          terraform_wrapper: false

      - name: Terraform Format
        run: |
          terraform fmt \
            -check \
            -diff \
            -recursive
        working-directory: ${{ github.workspace }}

      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Validate
        run: |
          terraform validate

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_github_token: ${{ secrets.GH_MACHINE_USER_TOKEN }}
        run: |
          set +e
          terraform plan \
            -detailed-exitcode \
            -input=false \
            -no-color \
            -out tfplan
          echo "exitcode=$?" >> $GITHUB_OUTPUT
          set -e

      - name: Process exit code
        id: plan-exitcode
        run: |
          planExitcode=${{ steps.plan.outputs.exitcode }}
          if [ ${planExitcode} -eq 0 ]; then
            planHasChanges=false
          elif [ ${planExitcode} -eq 2 ]; then
            planHasChanges=true
          else
            exit ${planExitcode}
          fi
          echo "plan-has-changes=${planHasChanges}" >> $GITHUB_OUTPUT

      - name: Read Terraform Result
        id: plan-result
        run: |
          PLAN_RESULT=$(terraform show -no-color tfplan)
          echo "plan-result<<EOF" >> $GITHUB_OUTPUT
          echo "$PLAN_RESULT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Retrieve resource changes
        id: changing-resources
        run: |
          terraform show -json tfplan | jq -rc '.resource_changes' > tfplan.resource_changes.json

          # Ref: https://www.terraform.io/docs/internals/json-format.html#change-representation
          RESOURCES_TO_BE_REPLACED=$(
            jq -c '. | if . then . else [] end | map(select(.change.actions | length==2) ) | [.[].address]' < tfplan.resource_changes.json
          )
          RESOURCES_TO_BE_CREATED=$(
            jq -c '. | if . then . else [] end | map(select(.change.actions | length==1 and .[0] == "create") ) | [.[].address]' < tfplan.resource_changes.json
          )
          RESOURCES_TO_BE_DELETED=$(
            jq -c '. | if . then . else [] end | map(select(.change.actions | length==1 and .[0] == "delete") ) | [.[].address]' < tfplan.resource_changes.json
          )
          RESOURCES_TO_BE_UPDATED=$(
            jq -c '. | if . then . else [] end | map(select(.change.actions | length==1 and .[0] == "update") ) | [.[].address]' < tfplan.resource_changes.json
          )

          echo "resources-to-be-replaced=$RESOURCES_TO_BE_REPLACED" >> $GITHUB_OUTPUT
          echo "resources-to-be-created=$RESOURCES_TO_BE_CREATED" >> $GITHUB_OUTPUT
          echo "resources-to-be-deleted=$RESOURCES_TO_BE_DELETED" >> $GITHUB_OUTPUT
          echo "resources-to-be-updated=$RESOURCES_TO_BE_UPDATED" >> $GITHUB_OUTPUT

      - name: Comment to PR
        uses: actions/github-script@v7
        env:
          PLAN_HAS_CHANGES: ${{ steps.plan-exitcode.outputs.plan-has-changes }}
          PLAN_RESULT: ${{ steps.plan-result.outputs.plan-result }}
          RESOURCES_TO_BE_REPLACED: ${{ steps.changing-resources.outputs.resources-to-be-replaced }}
          RESOURCES_TO_BE_CREATED: ${{ steps.changing-resources.outputs.resources-to-be-created }}
          RESOURCES_TO_BE_DELETED: ${{ steps.changing-resources.outputs.resources-to-be-deleted }}
          RESOURCES_TO_BE_UPDATED: ${{ steps.changing-resources.outputs.resources-to-be-updated }}
          WORKING_DIRECTORY: ${{ github.workspace }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planHasChanges = `${process.env.PLAN_HAS_CHANGES}` === 'true';

            if (!planHasChanges) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `**No changes.**
                       *Working Directory: \`${process.env.WORKING_DIRECTORY}\`*`
              });
              process.exit(0);
            }

            const planResult = process.env.PLAN_RESULT;
            const regexResult = /\n(Plan:.*)\n/g.exec(planResult);
            let resultSummary = "";
            if (regexResult && regexResult.length > 1) {
              resultSummary = regexResult[1];
            }

            const resourcesToBeReplaced = JSON.parse(process.env.RESOURCES_TO_BE_REPLACED)
            const resourcesToBeCreated = JSON.parse(process.env.RESOURCES_TO_BE_CREATED)
            const resourcesToBeDeleted = JSON.parse(process.env.RESOURCES_TO_BE_DELETED)
            const resourcesToBeUpdated = JSON.parse(process.env.RESOURCES_TO_BE_UPDATED)
            const changingResources = "```diff\n"
              + [].concat(
                  resourcesToBeCreated.map(resourceName => `+ ${resourceName} will be created.`),
                  resourcesToBeDeleted.map(resourceName => `- ${resourceName} will be destroyed.`),
                  resourcesToBeUpdated.map(resourceName => `! ${resourceName} will be updated in-place.`),
                  resourcesToBeReplaced.map(resourceName => `- ${resourceName} will be replaced.`),
                ).join('\n')
              + "\n```"

            const body = `
            # Plan Summary
            **${resultSummary}**
            *Working Directory:* \`${process.env.WORKING_DIRECTORY}\`
            ## Resources to be changed
            ${changingResources}

            # Plan Details
            <details>
              <summary>terraform plan detail</summary>

            \`\`\`hcl
            ${planResult}
            \`\`\`
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

